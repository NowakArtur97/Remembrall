AWSTemplateFormatVersion: 2010-09-09
Description: Remembrall Template
Parameters:
  EmailSender:
    Type: String
    Description: Email address of the person sending the notification emails
    Default: nowart97@gmail.com
  EmailSubject:
    Type: String
    Description: Notification email subject
    Default: Notification
  APIGatewayName:
    Type: String
    Default: remembrall-api
  APIGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: prod
Resources:
  DependencyToS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - "-"
        - - "python-layer-dependency"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
  DependencyToS3LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Join
                  - ""
                  - - "arn:aws:s3:::"
                    - !Ref DependencyToS3Bucket
                    - ""
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Join
                  - ""
                  - - "arn:aws:s3:::"
                    - !Ref DependencyToS3Bucket
                    - "/*"
  DependencyToS3LambdaInvoke:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: DependencyToS3LambdaFunction
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt DependencyToS3LambdaFunction.Arn
  DependencyToS3LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Timeout: 30
      Handler: index.lambda_handler
      Role: !GetAtt DependencyToS3LambdaRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref DependencyToS3Bucket
          URL: https://raw.githubusercontent.com/NowakArtur97/Remembrall/master/aws/dependencies.zip
      Code:
        ZipFile: |
          import os
          import json
          import urllib.request
          import boto3
          from urllib.parse import urlparse
          import cfnresponse

          s3 = boto3.resource('s3')
          BUCKET = os.environ['BUCKET_NAME']

          def save_to_local(url):
              urlPath = urlparse(url).path
              fileName = os.path.basename(urlPath)
              filePath = '/tmp/' + fileName
              urllib.request.urlretrieve(url, filePath)
              return filePath

          def copy_to_s3(url):
              filePath = save_to_local(url)
              fileName = os.path.basename(filePath)
              s3.meta.client.upload_file(filePath, BUCKET, fileName)
              s3.Object(BUCKET, fileName).put(Body=open(filePath, 'rb'), ContentType="application/zip")

          def clear_bucket():
              s3.Bucket(BUCKET).objects.all().delete()

          def lambda_handler(event, context):
              responseData = {}
              requestType = event['RequestType']
              try:
                  if requestType == 'Create':
                      url = os.environ['URL']
                      copy_to_s3(url)
                      print("Successfully copied file from url: " + url + " to bucket: " + BUCKET)
                  elif requestType == 'Delete':
                      clear_bucket()
                      print("Successfully cleared bucket: " + BUCKET)
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              except Exception as e:
                  print("Exception")
                  print(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
  WebsiteS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - "-"
        - - "remembrall"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteS3Bucket
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${WebsiteS3Bucket}/*"
  PythonDependenciesLayer:
    Type: "AWS::Lambda::LayerVersion"
    DependsOn: DependencyToS3LambdaInvoke
    Properties:
      CompatibleRuntimes:
        - python3.9
      Content:
        S3Bucket: !Ref DependencyToS3Bucket
        S3Key: !Sub "dependencies.zip"
      LayerName: "dependencies_layer"
  GithubToS3LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Join
                  - ""
                  - - "arn:aws:s3:::"
                    - !Ref WebsiteS3Bucket
                    - ""
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Join
                  - ""
                  - - "arn:aws:s3:::"
                    - !Ref WebsiteS3Bucket
                    - "/*"
  GithubToS3LambdaInvoke:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - GithubToS3LambdaFunction
      - DependencyToS3LambdaInvoke
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt GithubToS3LambdaFunction.Arn
  GithubToS3LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Timeout: 120
      Handler: index.lambda_handler
      Layers:
        - !Ref PythonDependenciesLayer
      Role: !GetAtt GithubToS3LambdaRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref WebsiteS3Bucket
          REPOSITORY_URL: https://github.com/NowakArtur97/Remembrall
          IGNORED_FILES_AND_FOLDERS: aws
          IGNORED_EXTENSIONS: md
          BRANCH: master
      Code:
        ZipFile: |
          import os
          import json
          import urllib.request
          import boto3
          import requests
          from bs4 import BeautifulSoup
          from urllib.parse import urlparse
          import cfnresponse

          WRAPPER_CLASS = 'Box mb-3'
          ELEMENT_CLASS = 'Box-row Box-row--focus-gray py-2 d-flex position-relative js-navigation-item'
          LINK_CLASS = 'Link--primary'
          DIRECTORY_ICON_CLASS = 'octicon'

          BUCKET = os.environ['BUCKET_NAME']
          BRANCH = os.environ['BRANCH']
          IGNORED_EXTENSIONS = os.environ['IGNORED_EXTENSIONS'].split(",")
          IGNORED_FILES_AND_FOLDERS = os.environ['IGNORED_FILES_AND_FOLDERS'].split(",")

          s3 = boto3.resource('s3')

          def find_all_resources(url, nestedPath="", resources=[]):
              page = requests.get(url)
              soup = BeautifulSoup(page.content, 'html.parser')
              wrapperElement = soup.find('div', class_=[WRAPPER_CLASS])
              allFilesElements = wrapperElement.find_all('div', class_=ELEMENT_CLASS)
              notIgnored = filter(lambda f: f.find('a', href=True, class_=LINK_CLASS).get_text() not in IGNORED_FILES_AND_FOLDERS, allFilesElements)
              for element in notIgnored:
                  isDirectory = element.find('svg', class_=DIRECTORY_ICON_CLASS)['aria-label'] == "Directory"
                  resourceName = element.find('a', href=True, class_=LINK_CLASS).get_text()
                  link = url + "/" + resourceName
                  if isDirectory:
                      if nestedPath == "":
                          nestedResources = find_all_resources(link, resourceName, resources)
                          flatten = flatten_list(nestedResources)
                          resources.append(flatten)
                      else:
                          nestedResources = find_all_resources(link, nestedPath + "/" + resourceName, resources)
                          flatten = flatten_list(nestedResources)
                          resources.append(flatten)
                  else:
                      extension = link.rsplit('.', 1)[1]
                      if extension in IGNORED_EXTENSIONS:
                          continue
                      contentType = resolve_content_type(extension)
                      if nestedPath == "":
                          resource = GithubResource(get_raw_url(link), contentType, resourceName)
                          resources.append(resource)
                      else:
                          resource = GithubResource(get_raw_url(link), contentType, nestedPath + "/" + resourceName)
                          resources.append(resource)

              return flatten_list(resources)

          def flatten_list(_2d_list):
              flat_list = []
              for element in _2d_list:
                  if type(element) is list:
                      for item in element:
                          flat_list.append(item)
                  else:
                      flat_list.append(element)
              return flat_list

          def resolve_content_type(extension):
              if extension == "html":
                  return "text/html"
              elif extension == "css":
                  return "text/css"
              elif extension == "js":
                  return "text/javascript"
              elif extension == "py":
                  return "text/x-python"
              elif extension in ["jpeg", "jpg"]:
                  return "image/jpeg"
              elif extension == "png":
                  return "image/png"
              elif extension == "tiff":
                  return "image/tiff"
              elif extension == "bmp":
                  return "image/bmp"
              elif extension == "gif":
                  return "image/gif"
              elif extension in ["svg", "xml"]:
                  return "image/svg+xml"
              elif extension in ["mp3", "wav", "ogg"]:
                  return "audio/mpeg"
              elif extension == "pdf":
                  return "application/pdf"
              elif extension == "zip":
                  return "application/zip"
              elif extension in ["yaml"]:
                  return "binary/octet-stream"
              else:
                  return "text/plain"

          def get_raw_url(url):
              return url.replace("https://github.com", "https://raw.githubusercontent.com").replace("/tree/" + BRANCH +"/", "/" + BRANCH +"/")

          def save_to_local(resource):
              url = resource.url
              urlPath = urlparse(url).path
              fileName = os.path.basename(urlPath)
              filePath = '/tmp/' + fileName
              urllib.request.urlretrieve(url, filePath)
              return filePath

          def upload_to_s3(resource, filePath):
              fileName = os.path.basename(filePath)
              s3.Object(BUCKET, resource.key).put(Body=open(filePath, 'rb'), ContentType=resource.contentType)

          def copy_to_s3(resource):
              filePath = save_to_local(resource)
              upload_to_s3(resource, filePath)

          def clear_bucket():
              s3.Bucket(BUCKET).objects.all().delete()

          def lambda_handler(event, context):
              responseData = {}
              requestType = event['RequestType']
              try:
                  if requestType == 'Create':
                      repositoryUrl = os.environ['REPOSITORY_URL'] + "/tree/" + BRANCH
                      resources = find_all_resources(repositoryUrl)
                      print(repositoryUrl)
                      for resource in resources:
                          print(resource.url)
                          print(resource.contentType)
                          print(resource.key)
                      try:
                          for resource in resources:
                              copy_to_s3(resource)
                      except Exception as e:
                          print("Exception on copy")
                          print(e)
                          cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
                          return
                  elif requestType == 'Delete':
                      clear_bucket()
                      print("Successfully cleared bucket: " + BUCKET)
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              except Exception as e:
                  print(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, responseData)

          class GithubResource:
            def __init__(self, url, contentType,  key):
              self.url = url
              self.contentType = contentType
              self.key = key
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      Description: Remembrall API Deployment
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref APIGatewayStageName
      Description: Remembrall API Stage v1
  ApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ApiGatewayToStateMachineLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Remembrall API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref APIGatewayName
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: remembrall
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      OperationName: "remembrall"
      AuthorizationType: NONE
      ApiKeyRequired: false
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt ApiGatewayToStateMachineLambdaFunction.Arn
  ApiGatewayToStateMachineLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
  ApiGatewayToStateMachineLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Timeout: 30
      Handler: index.lambda_handler
      Role: !GetAtt ApiGatewayToStateMachineLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3, json, os

          def lambda_handler(event, context):
              print(json.loads(event['body']))
              data = json.loads(event['body'])
              data['timeDelay'] = int(data['timeDelay'])
              checks = []
              checks.append('message' in data)
              checks.append(type(data['timeDelay']) == int)
              checks.append('option' in data)
              if False in checks:
                  response = {
                      "statusCode": 400,
                      "body": json.dumps( { "Status": "Success", "Reason": "Input failed validation" } )
                  }
              else:
                  response = {
                      "statusCode": 200,
                      "body": json.dumps( {"Status": "Success"} )
                  }
              return response
  ReplaceInS3LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Join
                  - ""
                  - - "arn:aws:s3:::"
                    - !Ref WebsiteS3Bucket
                    - "/*"
  ReplaceInS3LambdaInvoke:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - GithubToS3LambdaInvoke
      - ReplaceInS3LambdaFunction
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt ReplaceInS3LambdaFunction.Arn
  ReplaceInS3LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: ApiGatewayRestApi
    Properties:
      Runtime: python3.9
      Timeout: 60
      Handler: index.lambda_handler
      Role: !GetAtt ReplaceInS3LambdaRole.Arn
      Environment:
        Variables:
          FILE_NAME: script.js
          BUCKET_NAME: !Ref WebsiteS3Bucket
          VALUES_TO_REPLACE: API_GATEWAY_URL
          VALUES_TO_BE_REPLACED: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${APIGatewayStageName}
      Code:
        ZipFile: |
          import os
          import cfnresponse
          import boto3

          FILE_NAME = os.environ['FILE_NAME']
          BUCKET_NAME = os.environ['BUCKET_NAME']
          VALUES_TO_REPLACE = os.environ['VALUES_TO_REPLACE'].split(",")
          VALUES_TO_BE_REPLACED = os.environ['VALUES_TO_BE_REPLACED'].split(",")

          TMP_FILE_PATH = '/tmp/' + FILE_NAME

          s3 = boto3.resource('s3')

          def download_file():
            BUCKET = s3.Bucket(BUCKET_NAME)
            BUCKET.download_file(FILE_NAME, TMP_FILE_PATH)

          def read_file():
              with open(TMP_FILE_PATH, 'r') as file:
                filedata = file.read()
              return filedata

          def reaplce_values_in_file(filedata):
              for index, toReplace in enumerate(VALUES_TO_REPLACE):
                toBeReplaced = VALUES_TO_BE_REPLACED[index]
                filedata = filedata.replace(toReplace, toBeReplaced)
                print("Changed value from: " + toReplace + " to: " + toBeReplaced)
              return filedata

          def save_new_values_to_file(filedata):
              with open(TMP_FILE_PATH, 'w') as file:
                file.write(filedata)

          def upload_updated_file_to_s3():
              s3.Object(BUCKET_NAME, FILE_NAME).put(Body=open(TMP_FILE_PATH, 'rb').read())

          def lambda_handler(event, context):
              responseData = {}
              requestType = event['RequestType']
              try:
                if requestType == 'Create':
                  download_file()
                  filedata = read_file()
                  filedata = reaplce_values_in_file(filedata)
                  save_new_values_to_file(filedata)
                  upload_updated_file_to_s3()
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              except Exception as e:
                print(e)
                cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
  EmailSenderLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub "${AWS::Region}-EmailSenderLambdaRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: "*"
  EmailSenderLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Timeout: 30
      Handler: index.lambda_handler
      Role: !GetAtt EmailSenderLambdaRole.Arn
      Environment:
        Variables:
          SENDER: !Ref EmailSender
          EMAIL_SUBJECT: !Ref EmailSubject
      Code:
        ZipFile: |
          import boto3, os, json

          SENDER = os.environ["SENDER"]
          EMAIL_SUBJECT = os.environ["EMAIL_SUBJECT"]

          ses = boto3.client("ses")

          def send_email(input):
              recipient = event["Input"]["email"]
              message = event["Input"]["message"]
              ses.send_email(
                  Source=SENDER,
                  Destination={"ToAddresses": [recipient]},
                  Message={
                      "Subject": {EMAIL_SUBJECT},
                      "Body": {"Text": {"Data": message}},
                  },
              )
              print('Message: [' + message + '] sent successfully to: ' + recipient)


          def lambda_handler(event, context):
              attachment = {}
              print("Received event: " + json.dumps(event))
              try:
                  input = event["Input"]
                  send_email(input)
                  return "Success"
              except Exception as e:
                  print("Exception when sending email")
                  print(e)
                  return "Fail"
Outputs:
  WebsiteUrl:
    Description: Website Url
    Value: !GetAtt WebsiteS3Bucket.WebsiteURL
  APIGatewayEndpoint:
    Description: API Prod stage endpoint
    Value: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${APIGatewayStageName}
