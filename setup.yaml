AWSTemplateFormatVersion: 2010-09-09
Description: Remembrall Template
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - "-"
        - - "remembrall"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
  BucketCleanerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub "${AWS::Region}-BucketCleanerLambdaRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${S3Bucket}"
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
  BucketCleanerLambdaInvoke:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - BucketCleanerLambdaFunction
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt BucketCleanerLambdaFunction.Arn
  BucketCleanerLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: S3Bucket
    Properties:
      Runtime: python3.9
      Timeout: 60
      Handler: index.lambda_handler
      Role: !GetAtt BucketCleanerLambdaRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3Bucket
      Code:
        ZipFile: |
          import os.path
          import boto3
          import cfnresponse

          print('Loading function')

          BUCKET = os.environ['BUCKET_NAME']

          s3 = boto3.resource('s3')

          def clear_bucket():
              s3.Bucket(BUCKET).objects.all().delete()
              print("Successfully cleared bucket: " + BUCKET)

          def lambda_handler(event, context):
              responseData = {}
              if event['RequestType'] == 'Delete':
                  try:
                      clear_bucket()
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                  except Exception as e:
                      print('Exception when cleaning bucket: ' + BUCKET)
                      print(e)
                      cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

Outputs:
  WebsiteUrl:
    Description: "Website Url"
    Value: !GetAtt "S3Bucket.WebsiteURL"
